{
  "Import Unfolded Map SDK": {
    "prefix": "uf-import-map-sdk",
    "description": "Imports [Unfolded Map SDK](https://docs.unfolded.ai/map-sdk/javascript-map-sdk).",
    "body": [
      "import {UnfoldedMap, setViewState} from '@unfolded/map-sdk';",
    ]
  },
  "Create Unfolded Map": {
    "prefix": "uf-create-map",
    "description": "Creates a new UnfoldedMap.",
    "body": [
      "const map = new UnfoldedMap({",
      "\tmapUUID: '${1:mapId}', // use: https://www.uuidgenerator.net",
      "\tappendToDocument: true,",
      "\tembed: true,",
      "\twidth: window.innerWidth,",
      "\theight: window.innerHeight,",
      "});"
    ]
  },
  "Get Unfolded Map Url": {
    "prefix": "uf-get-map-url",
    "description": "Gets the url for a map created and **published** in Unfolded Studio.",
    "body": [
      "const mapUrl = UnfoldedMapSDK.getMapUrl('${1:mapId}');",
      "console.log(mapUrl);"
    ]
  },
  "Add Dataset": {
    "prefix": "uf-add-dataset",
    "description": "Adds a previously uploaded dataset with the specified id to the map. Datasets can be either uploaded via the [Unfolded Data SDK](https://docs.unfolded.ai/data-sdk) or manually added in [Unfolded Cloud](https://studio.unfolded.ai).",
    "body": [
      "map.addDataset({",
      "\tuuid: '${1:datasetId}'",
      "\tlabel: '${2:datasetLabel}'",
      "});"
    ]
  },
  "Remove Dataset": {
    "prefix": "uf-remove-dataset",
    "description": "Removes dataset from the map.",
    "body": [
      "map.removeDataset('${1:datasetId}')"
    ]
  },
  "Refresh Map Data": {
    "prefix": "uf-refresh-map-data",
    "description": "Reloads the data displayed on the map.",
    "body": [
      "map.refreshMapData();"
    ]
  },
  "Set Map Event Handlers": {
    "prefix": "uf-set-map-event-handlers",
    "description": "Sets event handlers to receive notifications for the specified map events.",
    "body": [
      "map.setMapEventHandlers({",
      "\tonLoad: () => {",
      "\t\tconsole.log('map loaded!');",
      "\t},",
      "\tonClick: (clickEvent: ClickEvent) => {",
      "\t\tconsole.log(clickEvent);",
      "\t},",
      "\tonHover: (hoverEvent: HoverEvent) => {",
      "\t\tconsole.log(hoverEvent);",
      "\t},",
      "\tonGeometrySelection: (geometrySelectionEvent: GeometrySelectionEvent) => {",
      "\t\tconsole.log(geometrySelectionEvent);",
      "\t},",
      "\tonFilter: (filterChangeEvent: FilterChangeEvent) => {",
      "\t\tconsole.log(filterChangeEvent);",
      "\t},",
      "});"
    ]
  },
  "Set Map Timeline Event Handlers": {
    "prefix": "uf-set-map-timeline-event-handlers",
    "description": "Sets timeline interval and layer time change event handlers.",
    "body": [
      "map.setMapEventHandlers({",
      "\tonTimelineIntervalChange: (timelineInterval) => {",
      "\t\tconst startDateTime = new Date(timelineInterval[0]);",
      "\t\tconst endDateTime = new Date(timelineInterval[1]);",
      "\t\tconsole.log('start time: ' + startDateTime);",
      "\t\tconsole.log('end time: ' + endDateTime);",
      "\t},",
      "\tonLayerTimelineTimeChange: (currentDateTimeUnix) => {",
      "\t\tconst currentDateTime = new Date(currentDateTimeUnix);",
      "\t\tconsole.log('current layer time: ' + currentDateTime);",
      "\t},",
      "});"
    ]
  },
  "Remove Map Event Handlers": {
    "prefix": "uf-remove-map-event-handlers",
    "description": "Removes specificied map event handlers.",
    "body": [
      "map.setMapEventHandlers({",
      "\tonClick: null",
      "\tonHover: null",
      "\tonGeometrySelection: null",
      "\tonFilter: null",
      "});"
    ]
  },
  "Remove Map Timeline Event Handlers": {
    "prefix": "uf-remove-map-timeline-event-handlers",
    "description": "Removes timeline interval and layer time change event handlers.",
    "body": [
      "map.setMapEventHandlers({",
      "\tonTimelineIntervalChange: null",
      "\tonLayerTimelineTimeChange: null",
      "});"
    ]
  },
  "Remove All Map Event Handlers": {
    "prefix": "uf-remove-all-map-event-handlers",
    "description": "Removes all registered map event handlers.",
    "body": [
      "map.setMapEventHandlers(null);"
    ]
  },
  "Set Map View State": {
    "prefix": "uf-set-map-view-state",
    "description": "Positions the map view on a certain location based on the provided coordinates with a defined zoom level.",
    "body": [
      "map.setViewState({",
      "\tlongitude: -74.006058,",
      "\tlatitude: 40.712772,",
      "\tzoom: ${1:zoomLevel}",
      "});"
    ]
  },
  "Get Map Layers": {
    "prefix": "uf-get-map-layers",
    "description": "Returns layer `label`, `id`, and `isVisible` properties for each layer on the map.\nMake sure to call `map.getLayers()` after the map successfully loads.",
    "body": [
      "map.getLayers().then(data => {",
      "\tdata.layers.forEach(layer => {",
      "\t\tconsole.log(layer);",
      "\t});",
      "});"
    ]
  },
  "Log Map Layers on Load": {
    "prefix": "uf-log-map-layers-on-map-load",
    "description": "Logs map layer `label`, `id`, and `isVisible` properties for each layer on the loaded map.",
    "body": [
      "onLoad: () => {",
      "\tmap.getLayers().then(layers => {",
      "\t\tlayers.forEach(layer => {",
      "\t\t\tconsole.log(`layer:', layer.label`);",
      "\t\t\tconsole.log(`\tid:', layer.id`);",
      "\t\t\tconsole.log(`\tisVisible:', layer.isVisible`);",
      "\t\t});",
      "}"
    ]
  },
  "Add Points Map Layer": {
    "prefix": "uf-add-points-map-layer",
    "description": "Adds `point` layer to the map.",
    "body": [
      "map.addLayer({",
      "\tid: 'pointLayer',",
      "\ttype: 'point',",
      "\tconfig: {",
      "\t\tdataId: '${1:datasetId}',",
      "\t\tcolumns: {",
      "\t\t\t'lat': '${2:latitudeFieldName}',",
      "\t\t\t'lng': '${3:longitudeFieldName}',",
      "\t\t},",
      "\t\tisVisible: true,",
      "\t\tcolorScale: 'quantize',",
      "\t\tcolorField: {",
      "\t\t\tname: '${4:colorFieldName}',",
      "\t\t\ttype: 'real'",
      "\t\t},",
      "\t\tvisConfig: {",
      "\t\t\tcolorRange: {",
      "\t\t\t\tcolors: [",
      "\t\t\t\t\t'#440154','#472777','#3e4989','#30678d','#25828e',",
      "\t\t\t\t\t'#1e9d88','#35b778','#6dce58','#b5dd2b','#fde724'",
      "\t\t\t\t]",
      "\t\t\t}",
      "\t\t}",
      "\t}",
      "});"
    ]
  },
  "Remove Map Layer": {
    "prefix": "uf-remove-map-layer",
    "description": "Removes a layer from the map.",
    "body": [
      "map.removeLayer('${1:layerId});"
    ]
  },
  "Set Map Layer Visibility": {
    "prefix": "uf-set-map-layer-visibility",
    "description": "Shows or hides a map layer with the specified `layerId`.",
    "body": [
      "map.setLayerVisibility('${1:layerId}', false);"
    ]
  },
  "Set Data Filter": {
    "prefix": "uf-set-data-filter",
    "description": "Sets data filter value.",
    "body": [
      "map.setFilter({",
      "\tid: '${1:filterId}'",
      "\tdataId: '${2:datasetId}',",
      "\tfield: '${3:fieldName}',",
      "\tvalue: ${4:filterValue}",
      "});"
    ]
  },
  "Set Map View Theme": {
    "prefix": "uf-set-map-theme",
    "description": "Changes map theme to `dark` or `light` based on the passed parameter.",
    "body": [
      "map.setTheme('light');"
    ]
  },
  "Set Map Controls Visibility": {
    "prefix": "uf-set-map-control-visibility",
    "description": "Sets visibility for the built-in map controls: `mapLegend`, `toggle3d`, `splitMap`, and `mapDraw`.",
    "body": [
      "const mapConfig = {",
      "\tpanelId: '${1:mapControlId}',",
      "\tisVisible: false",
      "});"
    ]
  },
  "Set Map Timeline Config": {
    "prefix": "uf-set-map-timeline-config",
    "description": "Sets time filter timeline configuration that allows us to set timeline visibility, play/pause the animation, set the speed, set the time interval, change the time format and timezone.",
    "body": [
      "const startTime = new Date('2020.10.10').getTime();",
      "const endTime = new Date('2020.10.18').getTime();",
      "const timelineConfig = {",
      "\tidx: 0,",
      "\tcurrentTimeInterval: {",
      "\t\tstartTime: startTime,",
      "\t\tendTime: endTime",
      "\t},",
      "\ttimezone: 'America/Chicago', // from: https://momentjs.com/timezone",
      "\ttimeFormat: 'DD.MM.YYYY. HH:mm' // see: https://momentjs.com",
      "};",
      "",
      "map.setTimelineConfig(timelineConfig).then(timelineData => {",
      "\tconsole.log(timelineData);",
      "});"
    ]
  },
  "Get Map Timeline Info": {
    "prefix": "uf-get-map-timeline-info",
    "description": "Gets information object for the time filter timeline map control.",
    "body": [
      "map.getTimelineInfo(0).then(timelineData => {",
      "\tconsole.log(timelineData);",
      "});"
    ]
  },
  "Set Map Layer Timeline Config": {
    "prefix": "uf-set-map-layer-timeline-config",
    "description": "Sets layer timeline configuration used with `Trips layer` that allows us to set timeline visibility, play/pause the animation, set the speed, set the current time, change the time format and timezone.",
    "body": [
      "const time = new Date('2020.10.10').getTime();",
      "const timelineConfig = {",
      "\tcurrentTime: time",
      "\ttimezone: 'America/Chicago', // from: https://momentjs.com/timezone",
      "\ttimeFormat: 'DD.MM.YYYY. HH:mm' // see: https://momentjs.com",
      "};",
      "",
      "map.setLayerTimelineConfig(timelineConfig).then(timelineData => {",
      "\tconsole.log(timelineData);",
      "});"
    ]
  },
  "Get Map Layer Timeline Info": {
    "prefix": "uf-get-map-layer-timeline-info",
    "description": "Gets information object for the layer timeline control used with `Trips layer`.",
    "body": [
      "map.getLayerTimelineInfo().then(timelineData => {",
      "\tconsole.log(timelineData);",
      "});"
    ]
  },
  "Get Map Config": {
    "prefix": "uf-get-map-config",
    "description": "Gets map configuration object that contains `mapState`, `mapStyle`, and `visState` object properties.",
    "body": [
      "map.getLayers().then(mapConfig => {",
      "\tconsole.log(mapConfig);",
      "});"
    ]
  },
  "Set Map Config": {
    "prefix": "uf-set-map-config",
    "description": "Sets map configuration with updated `mapState`, `mapStyle`, and `visState` object properties.",
    "body": [
      "map.setMapConfig({",
      "\tmapState: {...}",
      "\tmapStyle: {...}",
      "\tvisState: {...}",
      "});"
    ]
  }  
}
